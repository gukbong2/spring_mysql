AOP - Aspect Oriented Programming 


업무 간의 공통적으로 적용되지만, 비즈니스 로직이 아닌 필요한 기능들 -Aspect

횡단 관심사 : 시스템의 여기저기에서 '공통'으로 사용되지만, 그 자체가 목적이 아니라
시스템의 완성도를 높여주는 역할.
	ex) 보안 처리나 로그에 대한 기록, 문제 발생 시를 대비한 이중 백업 등과 같이 개발자를 번거롭게 하는 작업들이 대표적인 예
	

AOP를 처음 접 할 때 가지는 의문 : '어떻게 기존의 코드를 수정하지 않고 코드의 앞이나 뒤에서 필요한 기능이 동작하도록 작성할 수 있을까?'
-> 프록시(Proxy) 패턴을 통해 구현!

프록시 패턴 : 외부에서 특정한 객체(target)을 호출하면, 실재 객체를 감싸고 있는 바깥쪽 객체(Proxy)를 통해서 호출이 전달됨. Proxy객체는 AOP기능이 적용된
상태에서 호출을 받아 사용되고, 실제 객체와 동일한 타입을 자동으로 생성할 수 있기 때문에 외부에서는 실제 객체와 동일한 타입으로 호출 됨.

================================================================================================================================================
AOP의 용어

	Aspect 		::: 공통 관심사에 대한 추상적인 명칭, 예를 들어 로깅이나 보안, 트랜잭션과 같은 기능 자체에 대한 용어.
	
	Advice 		::: 실제로 기능을 구현한 객체. 
						실제 적용시키고 싶은 코드 자체, 개발자가 만드는것은 Aspect가 아닌 클래스를 제작하고 @Advice를 적용하는 것임. 
						예를 들어 로그 출력 기능, 파라미터 체크 기능 자체는 Aspect라는 용어로 부르지만, 실제 구현시에는 Advice가 제작함.
						
	Join points ::: 공통 관심사를 적용할 수 있는 대상. Spring AOP에서는 각 개체의 메소드가 이에 해당.
						작성된 Advice가 활약할 수 있는 위치를 의미.
						예를 들어 BoardService에서 등록, 수정, 삭제만을 골라서 Advice를 적용할 수 있는데, 이때 BoardService의 모든 메소드는 JoinPoint가 됨.
	
	Pointcuts 	::: 여러 메소드 중 실제 Advice가 적용될 대상 메소드.
						여러 Join points중에서 Advice를 적용할 대상을 선택하는 정보. 이를 통해서 특정 메소드는 Advice가 적용된 형태로 동작함.
	
	target 		::: 대상 메소드를 가지는 객체.
						실제 비즈니스 로직을 수행하는 객체를  의미.
						용어 그대로 Aspect를 적용하는 대상인 객체.
	
	Proxy 		::: Advice가 적용되었을 때 만들어지는 객체.
	
	Introduction::: target에는 없는 새로운 메소드나 인스턴스 변수를 추가하는 기능.
	
	Weaving 	::: Advice와 target이 결합되어서 프록시 객체를 만드는 과정.

================================================================================================================================================
Advice의 종류

	Before Advice 	::: target의 메소드 호출 전에 적용
	After returning ::: target의 메소드 호출 이후에 적용
	After throwing  ::: target의 예외 발생 후 적용
	After 			::: target의 메소드 호출 후 예외의 발생에 관계없이 적용
	Around 			::: target의 메소드 호출 이전과 이후 모두 적용(가장 광범위 하게 사용됨)


ps : 설명만 보니 어렵다.





