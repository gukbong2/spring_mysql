1. 트랜잭션에 대한 기본 설명

	하나의 업무에 여러 개의 작은 업무들이 같이 묶여있는 것을 의미.
		ex) 계좌이체 - 한쪽에선 출금. 한쪽에선 입금 처리를 행함.
		
		시스템에서 가장 흔하게 처리 되는 트랜잭션의 상황!
			- 회원이 특정 게시판에 게시글을 추가하면 회원의 포인트가 올라가야함.
			- 원글에 댓글이 추가되면 댓글 테이블에 게시물이 등록되고, 원글에는 댓글의 숫자가 업데이트되야함.
			- 문의 게시판에 글을 등록하면 데이터베이스에도 글이 등록되지만, 담당자에게도 메일이 발송 돼야 하는 상황
			
2. 트랜잭션의 기본 원칙
	
	2-1. 원자성(Atomicity) - 하나의 트랜잭션은 모두 하나의 단위로 처리 되야한다.
		ex)하나의 트랜잭션이 A,B로 구성된다면, 항상 A,B의 처리결과는 동일한 결과여야 함.
		어떤 작업이 잘못되는 경우 모든 것은 다시 원점으로 되돌아가야만 한다.
		
	2-2. 일관성(Consistency) - 트랜잭션이 성공했다면, 데이터베이스의 모든 데이터는 일관성을 유지해야함.
			트랜잭션으로 처리된 데이터와 일반 데이터 사이에 차이가 없어야함.
			
	2-3. 격리(Isolation) - 트랜잭션으로 처리되는 중간엔 외부 간섭X
	
	2-4. 영속성(Durability) - 트랜잭션이 성공적으로 처리 되면, 그 결과는 영속적으로 보관돼야함.

3. @Transactional 애노테이션
	
	3.1 전파(Propagation)속성
		- PROPAGATION_MANDATORY : 작업은 반드시 특정한 트랜잭션이 존재한 상태에서만 가능
		- PROPAGATION_NESTED : 기존에 트랜잭션이 있는 경우, 포함되어서 실행
		- PROPAGATION_NEVER : 트랜잭션 상황에 실행되면 예외 발생
		- PROPAGATION_NOT_SUPPORTED : 트랜잭션이 있는 경우에는 트랜잭션이ㅏ 끝날 때 까지 보류 후 실행
		- PROPAGATION_REQUIRED : 트랜잭션이 있으면 그 상황에서 실행, 없으면 새로운 트랜잭션 실행(기본 설정)
		- PROPAGATION_REQUIRED_NEW : 대상은 자신만의 고유한 트랜잭션으로 실행
		- PROPAGATION_SUPPORTS : 트랜잭션을 필요로 하지 않으나, 트랜잭션 상황에 있다면 포함되어서 실행
		
	3.2 격리(iSOLATION) 레벨
		-DEFAULT : DB 설정, 기본 격리 수준(기본설정)
		-SERIALIZABLE : 가장 높은 격리, 성능 저하 우려있음
		-READ_UNCOMMITED : 커밋되지 않은 데이터에 대한 읽기를 허용
		-READ_COMMIT : 커밋된 데이터에 대해 읽기 허용
		-REPEATEABLE_READ : 동일 필드에 대해 다중 접근 시 모두 동일한 결과를 보장
		
	3.3 READ-ONLY 속성
		-true인 경우, insert, update, delete 실행 시 예외 발생, 기본 설정은 false
		
	3.4 Rollback-for-예외
		-특정 예외가 발생 시 강제로 Rollback
		
	3.5 No-Rollback-for-예외
		-특정 예외의 발생 시 Rollback 처리 되지 않음
	
	










ps : 애노테이션 속성이 너무 많다..